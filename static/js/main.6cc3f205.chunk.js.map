{"version":3,"sources":["serviceWorker.js","reducers/VenuesReducer.js","actions/Types.js","reducers/combine.js","components/Header/Header.js","actions/Actions.js","utils/createApiUrl.js","components/SearchBar/SearchBar.js","components/MapsLink/MapsLink.js","utils/createMapsUrl.js","components/Venues/VenueCard.js","components/Venues/VenuesList.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","venuesReducer","state","arguments","length","undefined","list","fetching","geoFailed","action","type","payload","Object","objectSpread","combineReducers","venues","Header","react_default","a","createElement","className","apiEndpoint","endpoint","env","process","apiUrl","REACT_APP_API_URL","version","REACT_APP_API_VERSION","client_id","REACT_APP_API_CLIENT_ID","client_secret","REACT_APP_API_CLIENT_SECRET","join","createApiUrl","fetchVenues","_ref","_ref$limit","limit","_ref$ll","ll","_ref$near","near","dispatch","params","axios","get","then","res","data","response","groups","items","receiveVenues","catch","error","SearchBar","inputRef","React","createRef","this","current","focus","_this2","onSubmit","e","_handleSubmit","style","formStyle","form","ref","inputField","placeholder","onChange","_handleChange","disabled","event","preventDefault","props","setState","target","value","Component","marginTop","marginBottom","marginRight","connect","MapsLink","address","rel","href","concat","createMapsUrl","stylesVenueCard","card","VenueCard","venue","item","formattedAddress","categories","map","c","shortName","name","components_MapsLink_MapsLink","_props$venues","_renderCardMessage","message","index","Venues_VenueCard","key","store","createStore","reducers","applyMiddleware","thunk","App","navigator","geolocation","getCurrentPosition","position","_position$coords","coords","latitude","longitude","react_redux_es","stylesApp","components_Header_Header","components_SearchBar_SearchBar","Venues_VenuesList","ReactDOM","render","components_App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cc3f205.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from 'src/actions/Types'\n\n// Why a function to return the initial state?\n// A: Easier to implement a \"reset state\" feature.\nconst initialState = () => ({\n  list: [],\n  fetching: true,\n  geoFailed: false,\n});\n\nconst venuesReducer = (\n  state = initialState(),\n  action = null\n) => {\n\n  const { type, payload } = action;\n\n  switch (type) {\n    case types.REQUEST_VENUES:\n      return {\n        ...state,\n        fetching: true,\n        geoFailed: false,\n      };\n\n    case types.RECEIVE_VENUES:\n      return {\n        ...state,\n        list: payload.list,\n        fetching: false,\n        geoFailed: false,\n      };\n\n    case types.CLEAR_VENUES:\n      return {\n        ...state,\n        list: [],\n        fetching: false,\n        geoFailed: false,\n      };\n\n    case types.GEOLOCATION_FAILED:\n      return {\n        ...state,\n        fetching: false,\n        geoFailed: true\n      };\n\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nexport default venuesReducer;","export const CLEAR_VENUES       = 'CLEAR_VENUES';\nexport const REQUEST_VENUES     = 'REQUEST_VENUES';\nexport const RECEIVE_VENUES     = 'RECEIVE_VENUES';\nexport const GEOLOCATION_FAILED = 'GEOLOCATION_FAILED';\n","import { combineReducers } from 'redux';\nimport venuesReducer from './VenuesReducer';\n\nexport default combineReducers({\n  venues: venuesReducer\n});\n","import React from 'react';\n\nconst Header = () => (\n  <h1 className='h2'> Cool places near you </h1>\n);\n\nexport default Header;\n","import axios from 'axios';\nimport * as types from './Types';\nimport { createApiUrl } from 'src/utils/createApiUrl';\n\n/**\n * Creating the API Endpoint to make the venues list request\n */\nconst apiEndpoint = createApiUrl('/venues/explore');\n\n/**\n * ****************************\n * Data State Actions block\n * ****************************\n */\nexport const requestVenues = () => ({\n  type: types.REQUEST_VENUES,\n});\n\nexport const receiveVenues = list => ({\n  type: types.RECEIVE_VENUES,\n  payload: { list }\n});\n\nexport const clearVenues = () => ({\n  type: types.CLEAR_VENUES,\n});\n\nexport const geolocationFailed = () => ({\n  type: types.GEOLOCATION_FAILED\n});\n\n/**\n * Async XHR Calls Block\n */\n/**\n * Creates the function to make the GET call to the Foursquare API\n * @param limit {number} the number of results to return\n * @param ll {(string|Object)} Latitude, Longitude\n * @param near {(string|Object)} Location name to search venues (ex.: New York, Chicago, etc...)\n * @returns {function(*): Promise<T>}\n */\nexport const fetchVenues = ({ limit = 10, ll = null, near = null }) => {\n  return (dispatch) => {\n\n    // creating the params object literal\n    const params = { limit, near, ll };\n\n    // updates the \"fetching\" state\n    dispatch(requestVenues());\n\n    // do the GET call\n    return axios.get(apiEndpoint, { params })\n      .then(res => {\n\n        if (res && res.data) {\n          // accessing directly the returned data without checking first\n          // is wrong, I know, usually I would triple check before\n          // using it, and also I would implement an interface here...\n          const list = res.data.response.groups[0].items;\n          // updates the state with the new list of venues\n          dispatch(receiveVenues(list))\n        }\n      })\n      .catch(error => {\n        // in case of error, updates the state\n        // to show a feedback to the user...\n        dispatch(geolocationFailed());\n        throw(error);\n      });\n  }\n};","/**\n * Composes the API Endpoint URL to call.\n * Uses the provided endpoint and the .env variables\n * @param endpoint {string} the endpoint to compose the final url around\n * @returns {string} the composed final url\n */\nexport const createApiUrl = endpoint => {\n\n  // accessing the .env variables\n  const env = process.env;\n  const\n    apiUrl = env.REACT_APP_API_URL,\n    version = env.REACT_APP_API_VERSION,\n    client_id = env.REACT_APP_API_CLIENT_ID,\n    client_secret = env.REACT_APP_API_CLIENT_SECRET;\n\n  // creating and returning the final url string\n  return endpoint\n    ? [\n      apiUrl, endpoint,\n      '?v=', version,\n      '&client_id=', client_id,\n      '&client_secret=', client_secret\n    ].join('')\n    : null;\n\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchVenues } from 'src/actions/Actions';\n\nclass SearchBar extends Component {\n\n  // local state to make a controlled input\n  state = {\n    near: null\n  };\n\n  // input ref to access the DOM element\n  inputRef = React.createRef();\n\n  componentDidMount() {\n    // for usability purposes, focus the search input\n    // after loading the component\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    const { near } = this.state;\n    return (\n      <form onSubmit={e => this._handleSubmit(e)} style={formStyle.form}>\n        <div className='row'>\n          <div className='col'>\n            <input type='text'\n                   ref={this.inputRef}\n                   style={formStyle.inputField}\n                   className='form-control'\n                   placeholder='Tokyo, Chicago, New York...'\n                   onChange={e => this._handleChange(e)}/>\n          </div>\n          <div className='col'>\n            <button disabled={!near} type='submit' className='btn btn-primary'>\n              Search\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n\n  _handleSubmit(event) {\n    event.preventDefault();\n    const { near } = this.state;\n    if (near) {\n      this.props.dispatch(fetchVenues({ near }));\n    }\n  }\n\n  _handleChange(event) {\n    this.setState({ near: event.target.value });\n  }\n}\n\nconst formStyle = {\n  form: { marginTop: '1em', marginBottom: '1em' },\n  inputField: { marginRight: '1em' }\n};\n\nexport default connect()(SearchBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createMapsUrl } from 'src/utils/createMapsUrl'\n\nconst MapsLink = ({ address }) => {\n\n  return (\n    <a\n      target='_blank'\n      className='card-link'\n      rel='noopener noreferrer'\n      href={createMapsUrl(address)}>\n      How to get there\n    </a>\n  );\n\n};\n\nMapsLink.propTypes = {\n  address: PropTypes.string.isRequired\n};\n\nexport default MapsLink;","export const createMapsUrl = address => (\n  address ? `https://www.google.com/maps/search/?api=1&query=${address}` : null\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MapsLink from 'src/components/MapsLink/MapsLink';\n\nconst VenueCard = ({ item }) => {\n\n  const { venue } = item;\n  const address = venue.location.formattedAddress.join(', ');\n  const categories = venue.categories.map(c => c.shortName).join(', ');\n\n  return (\n    <div className='card' style={stylesVenueCard.card}>\n      <div className='card-body'>\n        <h5 className='card-title'>{venue.name}</h5>\n        <h6 className='card-subtitle mb-2 text-muted'> {categories} </h6>\n        <p className='card-text'>\n          {address}\n        </p>\n        <MapsLink address={address}/>\n      </div>\n    </div>\n  );\n\n};\n\nVenueCard.propTypes = {\n  item: PropTypes.object.isRequired\n};\n\nconst stylesVenueCard = {\n  card: {\n    marginBottom: '1em',\n  }\n};\n\nexport default VenueCard;","import React from 'react';\nimport { connect } from 'react-redux';\nimport VenueCard from './VenueCard';\n\nconst VenuesList = props => {\n\n  const { list, fetching, geoFailed } = props.venues;\n\n  const _renderCardMessage = message => (\n    <div className='card'>\n      <div className='card-body'>{message}</div>\n    </div>\n  );\n\n  if (fetching) {\n    return _renderCardMessage('Loading...');\n  }\n\n  if (geoFailed) {\n    return _renderCardMessage('The location wasn\\'t found, please check and try again.');\n  }\n\n  return (\n    <div>\n      {\n        list.map((item, index) =>\n          <VenueCard item={item} key={index}/>\n        )\n      }\n    </div>\n  );\n\n};\n\nconst mapStateToProps = state => ({\n  venues: state.venues\n});\n\nexport default connect(mapStateToProps)(VenuesList);\n","import React, { Component } from 'react';\n\nimport thunk from 'redux-thunk';\nimport reducers from 'src/reducers/combine';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport Header from 'src/components/Header/Header';\nimport SearchBar from 'src/components/SearchBar/SearchBar';\nimport VenuesList from 'src/components/Venues/VenuesList';\nimport { fetchVenues, clearVenues } from 'src/actions/Actions';\n\nimport 'node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nclass App extends Component {\n\n  componentDidMount() {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          store.dispatch(fetchVenues({ ll: `${latitude}, ${longitude}` }));\n        }, () =>\n          store.dispatch(clearVenues())\n      );\n    } else {\n      store.dispatch(clearVenues());\n    }\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"container\">\n          <div className=\"row\" style={stylesApp}>\n            <div className=\"col-md\">\n              <Header/>\n              <SearchBar/>\n              <VenuesList/>\n            </div>\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nconst stylesApp = {\n  marginTop: 40\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}